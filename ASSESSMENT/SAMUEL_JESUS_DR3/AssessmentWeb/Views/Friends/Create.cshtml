@model AssessmentDomain.Entities.Friend

@{
    ViewBag.Title = "New Friend";
    ViewBag.PageModule = "Friends";
}

<div class="card">
    <div class="card-header">
        <h3>Create</h3>
    </div>
    <div class="card-body">
        @using (Html.BeginForm("Create", "Friends", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-row">
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.Name)
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.LastName)
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Email)
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.PhoneNumber)
                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.BirthDate)
                    @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    @Html.Label("Country")
                    @Html.DropDownList("CountryId", new SelectList(ViewBag.CountryId, "Id", "Name"), " - Select your country - ", new { @class = "custom-select" })
                </div>
                <div class="form-group col-md-4">
                    @Html.Label("State")
                    <label for="StateId">State</label>
                    <select id="StateId" name="StateId" class="custom-select" required></select>
                </div>
                <div class="form-group col-md-4">
                    <label for="binaryFile">Flag image</label>

                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroupFile">Upload</span>
                        </div>
                        <div class="custom-file">
                            <input type="file" class="custom-file-input" id="binaryFile" name="binaryFile">
                            <label class="custom-file-label" for="binaryFile">Choose file</label>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.PhotoUrl, "", new { @class = "text-danger" })
                </div>
            </div>
            if ((MultiSelectList)ViewBag.MyFriends != null)
            {
                <div class="form-row">
                    <div class="form-group col-md-4">

                        <label class="control-label">Friends:</label>
                        <p class="text-muted"><small>(press Ctrl to select multiple friends)</small></p>
                        @Html.DropDownList("MyFriendId", (MultiSelectList)ViewBag.MyFriends, new { @class = "custom-select", multiple = "multiple", required = "required" })

                    </div>
                </div>
            }
            <button type="submit" class="btn btn-outline-success">Save</button>

        }
    </div>
</div>


@section scripts{

    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

    <script>

        function setSelectValue(id, val) {
            document.getElementById(id).value = val;
        }

        const countrySelectChangedEventHandler = (event) => {
            if (!event.target.value) alert("Please, select a country");
            else {
                const countryId = event.target.value;

                const url =
                    `https://assessmentcountrflagwebapi20190325105438.azurewebsites.net/api/countries/${countryId
                    }/states`;
                fetch(url)
                    .then((response) => response.json())
                    .then((states) => {
                        let selectListOpts = states.map(state => `<option value="${state.Id
                            }">${state.Name}</option>`);

                        selectListOpts.unshift("<option>Choose...</option>");
                        document.getElementById('StateId').innerHTML = selectListOpts.join('');
                    });
            }
        };


        document.addEventListener('DOMContentLoaded',
            () => {
                document.querySelector('select[name="CountryId"]').onchange = countrySelectChangedEventHandler;
            },
            false);

        document.addEventListener('DOMContentLoaded',
            () => {
                document.querySelector('select[name="StateId"]').onchange = (event) => {
                    if (event.target.value)
                        setSelectValue('StateId', event.target.value);
                }
            },
            false);


    </script>
}